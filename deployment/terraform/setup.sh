#!/bin/bash

# ===============================================================================
# MLflow Terraform Setup Script
# ===============================================================================
# This script helps beginners set up Terraform infrastructure for MLflow
# Run with: ./setup.sh

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Banner
echo "==============================================================================="
echo "ğŸš€ MLflow Terraform Setup Script"
echo "==============================================================================="
echo "This script will help you set up AWS infrastructure for MLflow using Terraform"
echo ""

# Check prerequisites
print_status "Checking prerequisites..."

if ! command_exists terraform; then
    print_error "Terraform is not installed!"
    echo "Please install Terraform first:"
    echo "  macOS: brew install terraform"
    echo "  Or download from: https://terraform.io/downloads"
    exit 1
fi

if ! command_exists aws; then
    print_error "AWS CLI is not installed!"
    echo "Please install AWS CLI first:"
    echo "  macOS: brew install awscli"
    echo "  Or download from: https://aws.amazon.com/cli/"
    exit 1
fi

print_success "Prerequisites check passed!"

# Check AWS configuration
print_status "Checking AWS configuration..."

if ! aws sts get-caller-identity >/dev/null 2>&1; then
    print_error "AWS CLI is not configured or credentials are invalid!"
    echo "Please run: aws configure"
    echo "You'll need:"
    echo "  - AWS Access Key ID"
    echo "  - AWS Secret Access Key"
    echo "  - Default region (e.g., us-west-2)"
    exit 1
fi

AWS_ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
AWS_REGION=$(aws configure get region)
print_success "AWS configured - Account: $AWS_ACCOUNT, Region: $AWS_REGION"

# Interactive configuration
echo ""
print_status "Let's configure your MLflow infrastructure..."

# Get project name
echo -n "Enter your project name (no spaces, lowercase): "
read PROJECT_NAME

if [[ -z "$PROJECT_NAME" ]]; then
    PROJECT_NAME="mlflow-demo"
    print_warning "Using default project name: $PROJECT_NAME"
fi

# Get environment
echo ""
echo "Select environment:"
echo "1) Development (minimal cost, ~$20-30/month)"
echo "2) Staging (moderate cost, ~$70-100/month)"
echo "3) Production (full features, ~$200-400/month)"
echo -n "Choose (1-3): "
read ENV_CHOICE

case $ENV_CHOICE in
    1)
        ENVIRONMENT="dev"
        USE_NAT="false"
        USE_RDS="false"
        CPU="256"
        MEMORY="512"
        DESIRED_COUNT="1"
        ;;
    2)
        ENVIRONMENT="staging"
        USE_NAT="true"
        USE_RDS="true"
        CPU="512"
        MEMORY="1024"
        DESIRED_COUNT="1"
        ;;
    3)
        ENVIRONMENT="prod"
        USE_NAT="true"
        USE_RDS="true"
        CPU="1024"
        MEMORY="2048"
        DESIRED_COUNT="2"
        ;;
    *)
        print_warning "Invalid choice, using development settings"
        ENVIRONMENT="dev"
        USE_NAT="false"
        USE_RDS="false"
        CPU="256"
        MEMORY="512"
        DESIRED_COUNT="1"
        ;;
esac

# Get owner name
echo -n "Enter your name/team (for resource tagging): "
read OWNER

if [[ -z "$OWNER" ]]; then
    OWNER="mlops-team"
    print_warning "Using default owner: $OWNER"
fi

# Create terraform.tfvars
print_status "Creating terraform.tfvars configuration..."

cat > terraform.tfvars << EOF
# ===============================================================================
# MLflow Terraform Configuration
# Generated by setup script on $(date)
# ===============================================================================

# Basic Configuration
project_name = "$PROJECT_NAME"
environment  = "$ENVIRONMENT"
aws_region   = "$AWS_REGION"
owner        = "$OWNER"

# Infrastructure Settings
create_nat_gateway = $USE_NAT
create_rds         = $USE_RDS

# Container Configuration
container_cpu    = $CPU
container_memory = $MEMORY
desired_count    = $DESIRED_COUNT

# Security Settings
allowed_cidr_blocks = ["0.0.0.0/0"]  # WARNING: Allows access from anywhere
enable_deletion_protection = false

# Monitoring
create_cloudwatch_dashboard = true
log_retention_days = 7

# Cost Optimization
enable_auto_scaling = true
EOF

print_success "Configuration file created: terraform.tfvars"

# Show estimated costs
echo ""
print_status "Estimated monthly costs for your configuration:"
if [[ "$ENVIRONMENT" == "dev" ]]; then
    echo "  - ECS Fargate: ~$10-15"
    echo "  - Application Load Balancer: ~$16.50"
    echo "  - S3 Storage: ~$1-3"
    echo "  - CloudWatch: ~$2-5"
    echo "  Total: ~$20-30/month"
elif [[ "$ENVIRONMENT" == "staging" ]]; then
    echo "  - ECS Fargate: ~$15-25"
    echo "  - Application Load Balancer: ~$16.50"
    echo "  - NAT Gateway: ~$32"
    echo "  - RDS: ~$13"
    echo "  - S3 Storage: ~$2-5"
    echo "  - CloudWatch: ~$3-8"
    echo "  Total: ~$70-100/month"
else
    echo "  - ECS Fargate: ~$30-50"
    echo "  - Application Load Balancer: ~$16.50"
    echo "  - NAT Gateway: ~$32"
    echo "  - RDS: ~$50-70"
    echo "  - S3 Storage: ~$5-15"
    echo "  - CloudWatch: ~$10-20"
    echo "  Total: ~$150-300/month"
fi

# Ask if user wants to proceed
echo ""
echo -n "Do you want to deploy this infrastructure now? (y/n): "
read DEPLOY_NOW

if [[ "$DEPLOY_NOW" =~ ^[Yy]$ ]]; then
    print_status "Initializing Terraform..."
    terraform init
    
    print_status "Planning deployment..."
    terraform plan
    
    echo ""
    echo -n "Review the plan above. Deploy infrastructure? (y/n): "
    read CONFIRM_DEPLOY
    
    if [[ "$CONFIRM_DEPLOY" =~ ^[Yy]$ ]]; then
        print_status "Deploying infrastructure... This will take 5-10 minutes."
        terraform apply -auto-approve
        
        print_success "Infrastructure deployed successfully!"
        
        echo ""
        print_status "Getting service URLs..."
        terraform output service_urls
        
        echo ""
        print_success "Setup complete! Your MLflow infrastructure is ready."
        echo ""
        echo "Next steps:"
        echo "1. Access MLflow UI at the URL shown above"
        echo "2. Deploy your MLflow applications to the ECS cluster"
        echo "3. Configure your CI/CD pipeline"
        echo ""
        echo "To destroy this infrastructure later (to save costs):"
        echo "  terraform destroy"
        
    else
        print_warning "Deployment cancelled. You can deploy later with:"
        echo "  terraform apply"
    fi
else
    print_warning "Infrastructure not deployed. To deploy later:"
    echo "  terraform plan   # Review what will be created"
    echo "  terraform apply  # Deploy the infrastructure"
fi

echo ""
print_status "Useful commands:"
echo "  terraform plan     # See what will be changed"
echo "  terraform apply    # Apply changes"
echo "  terraform output   # Show output values"
echo "  terraform destroy  # Remove all resources"
echo ""
echo "For detailed documentation, see: TERRAFORM_README.md"
echo ""
print_success "Setup script completed!"
echo "==============================================================================="
