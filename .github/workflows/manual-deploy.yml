name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      model_version:
        description: 'Model version to deploy (optional)'
        required: false
        type: string
      skip_tests:
        description: 'Skip tests (not recommended for production)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.validate.outputs.environment }}
      model_version: ${{ steps.validate.outputs.model_version }}
      skip_tests: ${{ steps.validate.outputs.skip_tests }}
    
    steps:
    - name: Validate inputs
      id: validate
      run: |
        echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        echo "model_version=${{ github.event.inputs.model_version }}" >> $GITHUB_OUTPUT
        echo "skip_tests=${{ github.event.inputs.skip_tests }}" >> $GITHUB_OUTPUT
        
        echo "üöÄ Manual deployment triggered"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Model version: ${{ github.event.inputs.model_version || 'latest' }}"
        echo "Skip tests: ${{ github.event.inputs.skip_tests }}"

  test:
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.skip_tests != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml
      continue-on-error: false

  deploy:
    runs-on: ubuntu-latest
    needs: [validate-inputs, test]
    if: always() && (needs.test.result == 'success' || needs.validate-inputs.outputs.skip_tests == 'true')
    environment: ${{ needs.validate-inputs.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Deploy to ${{ needs.validate-inputs.outputs.environment }}
      run: |
        echo "üöÄ Deploying to ${{ needs.validate-inputs.outputs.environment }}"
        
        # Set environment-specific variables
        if [ "${{ needs.validate-inputs.outputs.environment }}" = "production" ]; then
          DEPLOY_URL="https://iris-prod.example.com"
          REPLICAS=3
        else
          DEPLOY_URL="https://iris-staging.example.com"
          REPLICAS=1
        fi
        
        echo "Deployment URL: $DEPLOY_URL"
        echo "Replicas: $REPLICAS"
        
        # Example deployment commands (replace with actual deployment logic)
        # kubectl set image deployment/iris-fastapi iris-fastapi=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-fastapi:latest
        # kubectl set image deployment/iris-streamlit iris-streamlit=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-streamlit:latest
        # kubectl rollout status deployment/iris-fastapi
        # kubectl rollout status deployment/iris-streamlit
        
        echo "‚úÖ Deployment completed!"
    
    - name: Run post-deployment tests
      run: |
        echo "üß™ Running post-deployment tests..."
        
        # Set environment-specific URL
        if [ "${{ needs.validate-inputs.outputs.environment }}" = "production" ]; then
          API_URL="https://iris-prod.example.com"
        else
          API_URL="https://iris-staging.example.com"
        fi
        
        echo "Testing API at: $API_URL"
        
        # Example health check (replace with actual endpoint)
        # curl -f $API_URL/health
        
        # Example prediction test
        # curl -X POST -H "Content-Type: application/json" \
        #   -d '{"sepal_length":5.1,"sepal_width":3.5,"petal_length":1.4,"petal_width":0.2}' \
        #   $API_URL/predict
        
        echo "‚úÖ Post-deployment tests passed!"
    
    - name: Update model version (if specified)
      if: needs.validate-inputs.outputs.model_version != ''
      run: |
        echo "üì¶ Updating model version to: ${{ needs.validate-inputs.outputs.model_version }}"
        
        # Example MLflow model promotion
        # python -c "
        # import mlflow
        # client = mlflow.tracking.MlflowClient()
        # client.transition_model_version_stage(
        #     name='iris-classifier',
        #     version='${{ needs.validate-inputs.outputs.model_version }}',
        #     stage='${{ needs.validate-inputs.outputs.environment == 'production' && 'Production' || 'Staging' }}'
        # )
        # "
        
        echo "‚úÖ Model version updated!"
    
    - name: Deployment summary
      run: |
        echo "üìã Deployment Summary"
        echo "===================="
        echo "Environment: ${{ needs.validate-inputs.outputs.environment }}"
        echo "Model version: ${{ needs.validate-inputs.outputs.model_version || 'latest' }}"
        echo "Tests skipped: ${{ needs.validate-inputs.outputs.skip_tests }}"
        echo "Status: ‚úÖ Success"
        
        if [ "${{ needs.validate-inputs.outputs.environment }}" = "production" ]; then
          echo "üåê Production URL: https://iris-prod.example.com"
        else
          echo "üåê Staging URL: https://iris-staging.example.com"
        fi
